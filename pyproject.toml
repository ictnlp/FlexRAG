[build-system]
requires = ["setuptools>=61", "wheel", "pybind11>=2.13"]
build-backend = "setuptools.build_meta"

[project]
name = "flexrag"
description = "Flexible RAG (Retrieval-Augmented Generation) framework for building AI applications."
authors = [{ name = "Zhang Zhuocheng", email = "zhuocheng_zhang@outlook.com" }]
license = { text = "MIT License" }
readme = "README.md"
urls = { "Homepage" = "https://github.com/ictnlp/flexrag", "Documentation" = "https://flexrag.readthedocs.io/en/latest/", "Source" = "https://github.com/ictnlp/flexrag" }
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dynamic = ["version"]
dependencies = [
    # general
    "numpy",
    "tenacity",
    "hydra-core>=1.3",
    "omegaconf>=2.3.0",
    "pillow",
    "colorama",
    "torch==2.7.0",
    "pandas",
    "sentencepiece",
    # metrics
    "rouge",
    "sacrebleu>=2.4.2",
    "pytrec_eval>=0.5",
    # datasets
    "datasets>=3.2.0",
    # models
    "openai>=1.58.1",
    "anthropic",
    "cohere",
    "ollama",
    "sentence_transformers",
    "transformers>=4.52.3",
    "accelerate",
    "mixedbread",
    "voyageai",
    # databases
    "lmdb",
    "msgpack",
    # processors
    "unidecode",
    "sacremoses",
    "opencc",
    # retrievers
    "PyStemmer",
    "bm25s",
    "elasticsearch>=8.14.0",
    "beautifulsoup4",
    "typesense",
    "httpx",
    "scipy",
    "scann>=1.4.0",
    # web retrievers
    "duckduckgo_search",
    "serpapi",
    "pytest-playwright",
    "markitdown",
    # gui
    "gradio>=5.8.0",
    # chunking
    "regex",
    "nltk",
    "tiktoken",
]

[project.optional-dependencies]
dev = [
    "black",
    "pytest",
    "pytest-asyncio",
    "pytest-mock",
    "sphinx",
    "sphinx-autobuild",
    "sphinx-book-theme",
    "sphinx-copybutton",
    "sphinx-intl",
    "myst-parser",
    "rstcheck",
    "doc8",
    "PySocks>=1.7.1",
    "cibuildwheel",
]

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"flexrag" = [
    "ranker/ranker_prompts/*.json",
    "assistant/assistant_prompts/*.json",
    "entrypoints/assets/*.png",
]

[tool.rstcheck]
ignore_directives = ["autoclass", "automodule", "autofunction", "autosummary"]

[tool.doc8]
ignore = ["D001"]

[tool.pytest.ini_options]
markers = ["gpu: mark test as requiring GPU"]
log_level = "DEBUG"
asyncio_default_fixture_loop_scope = "function"
