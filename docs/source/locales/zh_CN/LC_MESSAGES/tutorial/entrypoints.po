# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, ZhuochengZhang
# This file is distributed under the same license as the FlexRAG
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FlexRAG Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-21 20:53+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/tutorial/entrypoints.md:1 27b7f878b6dd445b8fc046fdf3b5a7e4
msgid "FlexRAG Entrypoints"
msgstr "FlexRAG 入口点"

#: ../../source/tutorial/entrypoints.md:2 1b565bb9054a4ad899cefbf5bbf17490
msgid ""
"FlexRAG entrypoints refer to a series of command-line executable programs"
" provided by FlexRAG. These programs can help you build indexes, evaluate"
" RAG assistants, manage retrieval caches, launch GUI applications, and "
"more. Each entry point allows parameters to be passed either via the "
"command line or through a configuration file. This tutorial will guide "
"you on how to use these entrypoints and customize your workflow with "
"parameters."
msgstr ""
"FlexRAG 入口点指一系列由 FlexRAG "
"提供的可通过命令行启动的程序。这些程序可以帮助您构建索引、评估 RAG "
"助手、管理检索缓存、启动GUI应用程序等。每个入口点均可以通过命令行或配置文件的方式传入参数。本教程将向您展示如何使用这些入口点并利用参数定制您的工作流程。"


#: ../../source/tutorial/entrypoints.md:4 6a5ba9126fed4596bc5319529b347210
msgid "Provided Entrypoints"
msgstr "FlexRAG 内置入口点"

#: ../../source/tutorial/entrypoints.md:5 930ee390d4d34eae9320ab9f588802ac
msgid ""
"In this section, we will introduce all FlexRAG entrypoints and their "
"corresponding configuration structures."
msgstr ""
"在这一小节中，我们将向您展示 FlexRAG 的内置入口点及其配置结构。"

#: ../../source/tutorial/entrypoints.md:7 980581b1c3a34f4388a841131e1fe590
msgid "Preparing the Retriever Index"
msgstr "构建索引"

#: ../../source/tutorial/entrypoints.md:8 b3984f480cd84e5da671189aed1d65f7
msgid ""
"This entrypoint is used to prepare the retriever index. You can use this "
"entrypoint by running `python -m flexrag.entrypoints.prepare_index`. The "
"defination of the configuration structure for the `prepare_index` "
"entrypoint is as follows:"
msgstr ""
"这个入口点被用于构建检索器索引。您可以通过 `python -m flexrag.entrypoints.prepare_index` "
"来使用这个入口点。该入口点的配置结构如下所示："

#: 6d56eed86f2b4311999437d1ce2384b4 flexrag.entrypoints.prepare_index.Config:1
#: of
msgid "Bases: :py:class:`~flexrag.datasets.rag_dataset.RAGCorpusDatasetConfig`"
msgstr ""

#: ../../source/tutorial/entrypoints.md:18 41d91a2597014b28ae07e3390d8eb921
msgid "Rebuilding the Retriever Index"
msgstr "重构索引"

#: ../../source/tutorial/entrypoints.md:19 c8110a5e02384c8ca86bd43f2f6c5d53
msgid ""
"This entrypoint is used to rebuild the index for the `DenseRetriever`. "
"You can use this entrypoint by running `python -m "
"flexrag.entrypoints.rebuid_index`. The defination of the configuration "
"structure for the `rebuid_index` entrypoint is as follows:"
msgstr ""
"该入口点可用于重构稠密检索器 `DenseRetriever` 的索引，您可以通过 `python -m "
"flexrag.entrypoints.rebuid_index` 来运行这个入口点。该入口点的配置结构如下所示："

#: 4a2474394f28403ca483c23960c6fd06
#: flexrag.retriever.dense_retriever.DenseRetrieverConfig:1 of
msgid ""
"Bases: "
":py:class:`~flexrag.retriever.retriever_base.LocalRetrieverConfig`, "
":py:class:`~types.DenseIndexConfig`"
msgstr ""

#: 2c858bd5ee4947048687a40df5feaebd
#: flexrag.retriever.dense_retriever.DenseRetrieverConfig:1 of
msgid "Configuration class for DenseRetriever."
msgstr "稠密检索器的配置结构。"

#: ../../source/tutorial/entrypoints.md 72b70037c7304543ab4d1a250ddb59d3
msgid "Parameters"
msgstr "参数"

#: 441e8cc499674196b79540d0db751062
#: flexrag.retriever.dense_retriever.DenseRetrieverConfig:3 of
msgid "Configuration for the query encoder. Default: None."
msgstr "查询编码器的配置结构，默认为：None。"

#: 0811b74d033d4c7994cc9916d2407841
#: flexrag.retriever.dense_retriever.DenseRetrieverConfig:5 of
msgid "Configuration for the passage encoder. Default: None."
msgstr "文档编码器的配置结构，默认为：None。"

#: 8850e0ad124f44dba9dc52450244f89e
#: flexrag.retriever.dense_retriever.DenseRetrieverConfig:7 of
msgid "Fields to be encoded. None stands for all fields. Default: None."
msgstr "知识条目中需要被编码的字段，默认为：None。"

#: ../../source/tutorial/entrypoints.md:29 ee4546944de3444db4b6e8283c825aa8
msgid "Evaluating the Assistant"
msgstr "评估 RAG 助手"

#: ../../source/tutorial/entrypoints.md:30 e8c36c5b27c04d5b999c8fccf8253876
msgid ""
"This entrypoint is used to evaluate the assistant on a given dataset. You"
" can use this entrypoint by running `python -m "
"flexrag.entrypoints.run_assistant`. The defination of the configuration "
"structure for the `run_assistant` entrypoint is as follows:"
msgstr ""
"该入口点可用于评估您的 RAG 助手，您可以通过执行 `python -m flexrag.entrypoints.run_assistant` "
"来运行该入口点。该入口点的配置结构如下所示："

#: e3418d213bfb4ae3a807469877c028be flexrag.entrypoints.run_assistant.Config:1
#: of
msgid ""
"Bases: :py:class:`~types.assistant_config`, "
":py:class:`~flexrag.datasets.rag_dataset.RAGEvalDatasetConfig`"
msgstr ""

#: ../../source/tutorial/entrypoints.md:40 ef74610a1ac946f99ba88ee4d5486073
msgid "Running GUI Application"
msgstr "通过图形界面运行 RAG 助手"

#: ../../source/tutorial/entrypoints.md:41 f983644aec974a05acfb60142e63abfd
msgid ""
"This entrypoint is used to run the assistant using the built-in Gradio "
"GUI interface. You can use this entrypoint by running `python -m "
"flexrag.entrypoints.run_interactive`. The defination of the configuration"
" structure for the `run_interactive` entrypoint is as follows:"
msgstr ""
"FlexRAG 提供了一个简易的图形界面来帮助您展示或调试您的 RAG 助手，该图形界面由 Gradio 编写，您可以通过执行 `python "
"-m flexrag.entrypoints.run_interactive` 来运行该入口点。该入口点的配置结构如下所示："

#: 21cd6bfb9b084c8c867da8f2ca3a0f78
#: flexrag.entrypoints.run_interactive.Config:1 of
msgid "Bases: :py:class:`~types.assistant_config`"
msgstr ""

#: ../../source/tutorial/entrypoints.md:51 18849c816bed4316ad34787229141442
msgid "Cache Management"
msgstr "缓存管理"

#: ../../source/tutorial/entrypoints.md:52 ec60ef4141084f298c96b3be20ca618a
msgid ""
"This entrypoint is used to manage the cache for the retrievers. You can "
"use this entrypoint by running `python -m flexrag.entrypoints.cache`. The"
" defination of the configuration structure for the `cache` entrypoint is "
"as follows:"
msgstr ""
"在 FlexRAG 内置的检索器中均应用了缓存功能，用于减少检索相同查询时的开销。这个入口点就可以用于管理已经被持久化的缓存。您可以执行 "
"`python -m flexrag.entrypoints.cache` 来运行该入口点。该入口点的配置结构如下所示："

#: 1eeeb033adf14ff09874b1399c42c63d flexrag.entrypoints.cache.Config:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: ../../source/tutorial/entrypoints.md:63 8ae03d6981e7440a819e095bb1950d6b
msgid ""
"If you wish to disable the Cache during retrieval, you can set the "
"environment variable by `export DISABLE_CACHE=True`."
msgstr "如果您希望在使用 FlexRAG 检索器时不使用缓存，您可以在环境变量中设置 `DISABLE_CACHE=True`。"

#: ../../source/tutorial/entrypoints.md:66 9089187dc4ec494d850952bcda5acc87
msgid "Evaluating the Generated Responses"
msgstr "评估已生成结果"

#: ../../source/tutorial/entrypoints.md:67 adbdf30b159b49d6adf868a3a293c9db
msgid ""
"This entrypoint is used to evaluate the generated responses. You can use "
"this entrypoint by running `python -m flexrag.entrypoints.evaluate`. The "
"defination of the configuration structure for the `evaluate` entrypoint "
"is as follows:"
msgstr ""
"某些情况下，您可能已经拥有了 RAG 助手的生成结果，此时您希望评估这些生成结果，这时您就可以使用这个入口点来对 RAG "
"助手的生成结果进行评估。您可以通过 `python -m flexrag.entrypoints.evaluate` "
"这一命令来运行该入口点。该入口点的配置结构如下所示："

#: cc77d12427b24b59be6e5e393e7563fe flexrag.entrypoints.evaluate.Config:1 of
msgid ""
"Bases: :py:class:`~flexrag.metrics.evaluator.EvaluatorConfig`, "
":py:class:`~flexrag.datasets.line_delimited_dataset.LineDelimitedDatasetConfig`"
msgstr ""

#: ../../source/tutorial/entrypoints.md:78 4f711855689f42e88a8b115794f23f41
msgid "Configuration Management"
msgstr "配置管理"

#: ../../source/tutorial/entrypoints.md:79 c255fa97fd8b4cc891174ac063673e68
msgid ""
"FlexRAG employs `dataclass` and [hydra-"
"core](https://github.com/facebookresearch/hydra) for configuration "
"management, which brings remarkable clarity to the complex configurations"
" within the RAG pipeline. Moreover, you can pass parameters to the "
"FlexRAG's entrypoints either via the command line or through "
"configuration files. This section will illustrate how to utilize both "
"methods to convey parameters to the FlexRAG entry point."
msgstr ""
"FlexRAG 使用 `dataclass` 和 [hydra-"
"core](https://github.com/facebookresearch/hydra) 进行配置管理，这使得 "
"RAG 流水线中复杂的配置变得非常清晰。同时您既可以通过命令行，也可以通过配置文件来向 FlexRAG "
"入口点传入相关参数。本节将会向您展示如何使用这两种参数向 FlexRAG 入口点传递参数。"

#: ../../source/tutorial/entrypoints.md:81 7f407605bbcc40f08fe3f3e1d277a480
msgid "Passing Configuration via Command Line"
msgstr "通过命令行传入参数"

#: ../../source/tutorial/entrypoints.md:82 81fa86fc1c524918bcdb35f5903c7237
msgid ""
"Configurations can be passed via the command line using the "
"`<config_key>=<config_value>` format. For example, you can run the "
"following command to set the configuration for a *modular assistant* with"
" a *dense retriever* and an *OpenAI generator*:"
msgstr ""
"配置信息可以通过在命令行中使用 `<config_key>=<config_value>` "
"的格式来传入。教程中大多数的例子都使用了这样的方式，该方式的优势是简单和直接。举例来说，您可以通过下面的命令来指定 FlexRAG "
"通过图形界面运行一个 *模块化助手*，同时指定该助手使用 *稠密检索器* 和 *OpenAI 生成器*。"

#: ../../source/tutorial/entrypoints.md:100 3217be233caf42f7b4d88d2dd5c8b0c3
msgid "Passing Configuration via Configuration File"
msgstr "通过配置文件传入参数"

#: ../../source/tutorial/entrypoints.md:101 f4281add31b0416faba31b90753d48e6
msgid ""
"Configurations can also be passed via a `YAML` file. For example, you can"
" create a `config.yaml` file with the following content:"
msgstr ""
"配置信息也可以通过 `YAML` 文件进行传入，这种方式会使得您的配置更容易管理。举例来说，您可以创建一个名为 `config.yaml` "
"的文件，并在文件中写入下述内容："

#: ../../source/tutorial/entrypoints.md:118 2ff4dbb46bb949bd95f8d0b26d1f01b3
msgid "Then, you can run the following command to use the configuration file:"
msgstr "随后您就可以通过运行下面的命令来将这个配置文件中的配置传入 FlexRAG 入口点程序中。"

#: ../../source/tutorial/entrypoints.md:125 cb3f3b070cac422a93ccefb1781b9383
msgid ""
"For more detailed usage, we recommend you to go through the [Hydra "
"documentation](https://hydra.cc/docs/intro/) to get a better "
"understanding of the concepts and features."
msgstr "您可以访问 [Hydra 文档](https://hydra.cc/docs/intro/)以获取更多有关如何传递配置信息的方式。"

#: ../../source/tutorial/entrypoints.md:130 74fff86564664f4c9f8684326566bd0f
msgid "Defining Your Own Configuration"
msgstr "定义您自己的配置结构"

#: ../../source/tutorial/entrypoints.md:131 640ec3f442da4488ac01c26624bc40dc
msgid ""
"You can define your own configuration structure by creating a new "
"`dataclass`. For example, you can define a new configuration structure "
"for a custom assistant as follows:"
msgstr ""
"您在构建您自己的应用程序时，也可以通过定义新的 `dataclass` 来创建配置结构。举例来说，您可以定义如下 `dataclass` 来为您的"
" RAG 助手创建配置结构："

#~ msgid ""
#~ "FlexRAG provides several entrypoints to "
#~ "run the RAG application. Each entrypoint"
#~ " has a default configuration structure "
#~ "that can be used to customize the"
#~ " workflow. This tutorial provides an "
#~ "overview of the FlexRAG entrypoints and"
#~ " how to customize the workflow using"
#~ " configuration management."
#~ msgstr ""
#~ "FlexRAG 入口点指一系列由 FlexRAG "
#~ "提供的可通过命令行启动的程序。这些程序可以帮助您构建索引、评估 RAG "
#~ "助手、管理检索缓存、启动GUI应用程序等。每个入口点均可以通过命令行或配置文件的方式传入参数。本教程将向您展示如何使用这些入口点并利用参数定制您的工作流程。"

#~ msgid ""
#~ "Leveraging python `dataclass` and [hydra-"
#~ "core](https://github.com/facebookresearch/hydra), FlexRAG "
#~ "simplifies configuration management, making it"
#~ " easier to handle complex setups and"
#~ " customize your workflow."
#~ msgstr ""
#~ "FlexRAG 使用 `dataclass` 和 [hydra-"
#~ "core](https://github.com/facebookresearch/hydra) 进行配置管理，这使得 "
#~ "RAG 流水线中复杂的配置变得非常清晰。同时您既可以通过命令行，也可以通过配置文件来向 FlexRAG "
#~ "入口点传入相关参数。本节将会向您展示如何使用这两种参数向 FlexRAG 入口点传递参数。"

#~ msgid "Supported Environment Variables"
#~ msgstr ""

#~ msgid ""
#~ "FlexRAG supports several environment variables"
#~ " that can be used to customize "
#~ "the workflow. The following are the "
#~ "supported environment variables:"
#~ msgstr ""

#~ msgid "`DISABLE_CACHE`: Set this variable to `False` to disable caching."
#~ msgstr ""

#~ msgid ""
#~ "`USER_MODULE`: Set this variable to the"
#~ " path of the user module to "
#~ "load custom modules."
#~ msgstr ""

