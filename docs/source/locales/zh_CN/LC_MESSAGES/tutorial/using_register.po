# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, ZhuochengZhang
# This file is distributed under the same license as the FlexRAG
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FlexRAG Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-19 16:54+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/tutorial/using_register.md:1 f5cae5dc5aa640d694db46c72762a5c1
msgid "Using Registers"
msgstr "高级教程：使用注册器"

#: ../../source/tutorial/using_register.md:2 4c3da8f6d88e4a299358ebeee465bfa0
msgid ""
"FlexRAG provides a `Register` class to manage the registration of "
"different components. The `Register` class can be instantiated to "
"register components such as `Generator`, `Encoder`, `Retriever`, "
"`Ranker`, `Metrics`, `Processor` and `Assistant`. This tutorial will "
"guide you through the process of using the `Register` class to register "
"and retrieve components."
msgstr "注册器 `Register` 是 FlexRAG 框架中整合配置文件，加载各个 RAG 组件的一个重要模块。"
"注册器可以将多个同类型的组件收集到一起，并生成统一的配置结构帮助您配置和使用这些组件。"
"本教程将会向您展示如何使用 FlexRAG 中的注册器。"

#: ../../source/tutorial/using_register.md:4 d7f30d81f32d4ec5a415345b88f70a77
msgid "Using FlexRAG Registers"
msgstr "使用 FlexRAG 内置的注册器"

#: ../../source/tutorial/using_register.md:5 1d8cccf2eb444f4fb9bbb1800a39ab87
msgid ""
"FlexRAG provides a set of predefined registers for different components. "
"These registers can be used to register and retrieve components of the "
"respective type. The following registers are available in FlexRAG:"
msgstr ""
"FlexRAG 中提供了一组事先定义好的注册器，这些注册器被用于注册各类 RAG 系统组件。"
"下面的列表展示了 FlexRAG 中内置的注册器。"

#: ../../source/tutorial/using_register.md:7 77ccee105baf4640b41683627a203472
msgid "ASSISTANTS"
msgstr ""

#: ../../source/tutorial/using_register.md:8 5b108112381b4f75a43ffa41074000be
msgid "REFINERS"
msgstr ""

#: ../../source/tutorial/using_register.md:9 62995fcc23cf452986772b1dcb24d1fa
msgid "CHUNKERS"
msgstr ""

#: ../../source/tutorial/using_register.md:10 1f9f04e5df204e789a6d144c3a334743
msgid "DOCUMENTPARSERS"
msgstr ""

#: ../../source/tutorial/using_register.md:11 b673b4e511ad406fa2a38ff5c1fe0e55
msgid "PROCESSORS"
msgstr ""

#: ../../source/tutorial/using_register.md:12 e2f174e613b84ca09053f31ab4bbd56e
msgid "METRICS"
msgstr ""

#: ../../source/tutorial/using_register.md:13 0eed848402574f78aef5f1e626b9412b
msgid "GENERATORS"
msgstr ""

#: ../../source/tutorial/using_register.md:14 52bc33a264ec4bf9808125d9989bc949
msgid "ENCODERS"
msgstr ""

#: ../../source/tutorial/using_register.md:15 2cb3958d259745c69b1d689a6ef4bdc1
msgid "RANKERS"
msgstr ""

#: ../../source/tutorial/using_register.md:16 76e5c4f6156a4398ad03db19e4b0d111
msgid "DENSE_INDEX"
msgstr ""

#: ../../source/tutorial/using_register.md:17 64e2cae987d540f3940e6f931c944db1
msgid "RETRIEVERS"
msgstr ""

#: ../../source/tutorial/using_register.md:18 1824d63631b04c7b9a8f99b03bc2f463
msgid "WEB_DOWNLOADERS"
msgstr ""

#: ../../source/tutorial/using_register.md:19 ac84869e27fa49b587722c20bf7943ec
msgid "WEB_READERS"
msgstr ""

#: ../../source/tutorial/using_register.md:22 f46c220ad29d40cfb962767b5f08d254
msgid ""
"If you are going to develop your project by modifying the FlexRAG source "
"code or using FlexRAG as a library, all the predefined registers are "
"available. However, if you are going to use FlexRAG's `run_assistant` or "
"`run_interactive` entrypoints, **only** the `ASSISTANTS` register is "
"available by default."
msgstr ""
"如果您希望通过修改 FlexRAG 源码来开发您的项目，"
"所有的注册器都可以被当作装饰器来注册您新增的组件。"
"然而如果您使用 FlexRAG 的 `run_assistant` 或 `run_interactive` 入口点，"
"那么仅有 `ASSISTANTS` 注册器可用于注册新的组件。"

#: ../../source/tutorial/using_register.md:25 6adbf9df4dc04cad953c2c721e94ad72
msgid "Registering a New Component"
msgstr "注册新的组件"

#: ../../source/tutorial/using_register.md:26 f6788b2fe6ea4206ad2234013c03e38d
msgid ""
"To register a new component, simply decorate the component class with the"
" corresponding register. For example, to register a new `Assistant` "
"component, you can use the `ASSISTANTS` register as shown below:"
msgstr ""
"您可以通过使用注册器来装饰您的组件从而将您的组件注册到已有的注册器中。"
"举例来说，您可以通过下面的代码来将您的 RAG 助手注册到 `ASSISTANTS` 注册器中："

#: ../../source/tutorial/using_register.md:44 491f6a5fe642417683b3e1af35d2980e
msgid ""
"The register takes the following arguments: *shortnames: str     The "
"shortnames of the component. The first shortname will be used as the "
"default shortname. config_class: Optional[Type]     The configuration "
"class for the component. If not provided, the component will not have a "
"configuration."
msgstr ""
"注册器在注册新组件时可以接受两个参数，分别是 `*shortnames` 和 `condig_class`。"
"其中 `shortnames` 可以接受一个字符串列表，用于作为当前组件的简化名称，方便您在加载时使用。"
"所有简化名称中的第一个将被作为这个组件的默认名称。"
"而 `config_class` 则接受一个 `dataclass` 类，用于作为当前组件的配置结构。"
"`config_class` 这个参数是可选的，如果您没有提供，那么这个组件将不使用配置。"

#: ../../source/tutorial/using_register.md:50 c9c3aa6edeef4d4c899d1c8cd55807b6
msgid "Generating the Configuration"
msgstr "生成配置结构"

#: ../../source/tutorial/using_register.md:51 b5c3273ecbe84ad1bcbb680b45a6f281
msgid ""
"After registering the component, you can generate the configuration "
"`dataclass` for all the registered components using the `make_config` "
"function. For example, to generate the configuration for all the "
"registered `Assistant` components, you can use the `make_config` function"
" as shown below:"
msgstr ""
"在注册组件后，您就可以通过 `make_config` 方法为所有组件生成一个公用的配置结构。"
"该配置结构可被用于加载任意一个组件并向其传递配置信息。"
"举例来说，您通过如下代码来为所有已注册的 RAG 助手生成一个配置文件："

#: ../../source/tutorial/using_register.md:57 003df4b255234d3790b6e48bd5a93172
msgid "The generated `AssistantConfig` class will have the following structure:"
msgstr "新生成的配置结构将如下所示："

#: ../../source/tutorial/using_register.md:74
#: ../../source/tutorial/using_register.md:86 535b7130d16c40ce856222a34aea36d5
#: e54746bc3d9e4803bec497feb3ebdd08
msgid ""
"This step will be automatically done if you are using the `run_assistant`"
" or `run_interactive` entrypoints."
msgstr "在 FlexRAG 的入口点程序中，那么很多配置结构都是这样生成的，"
"这将使得您能够非常灵活地通过配置文件来改变工作流程中的组件及其配置。"

#: ../../source/tutorial/using_register.md:77 63ae79a117db44b79dac7b6594e585bf
msgid "Loading the Component"
msgstr "加载组件"

#: ../../source/tutorial/using_register.md:78 4d96fd6b0e544fc3b7cee09b5cfec814
msgid ""
"To load the component using the configuration, you can use the `load` "
"function of the register. For example, to load the `MyAssistant` "
"component using the configuration, you can use the `load` function as "
"shown below:"
msgstr ""
"您也可以通过注册器的 `load` 方法来加载任意以注册的组件。"
"举例来说，您可以通过下面的代码来加载 `MyAssistant` 这一组件："

#: ../../source/tutorial/using_register.md:89 21cdad73378241ed8805039e342af348
msgid "Defining a New Register"
msgstr "定义新的注册器"

#: ../../source/tutorial/using_register.md:90 4abaf97c09c740c1925ddcf37a8f0a07
msgid ""
"The `Register` class can be extended to define a new register for a "
"specific component. For example, to define a new register for a "
"`Searcher` component, you can simply create a new instance of the "
"`Register` class as shown below:"
msgstr ""
"您也可以定义新的注册来注册您全新的组件。举例来说，如果您想定义一些类型为 Searcher 的组件，"
"您就可以使用下面的代码来定义一个新的注册器来注册这些组件："

#: ../../source/tutorial/using_register.md:98 619568c49d2c4078add2b0475cef8492
msgid "Utilizing Type Hints"
msgstr "利用类型提示"

#: ../../source/tutorial/using_register.md:99 7fbc3055bb7d4ad08f3f300add0c7e97
msgid ""
"As the `Register` class is a generic class, you can utilize type hints to"
" specify the type of the component that the register is managing. For "
"example, to define a register for a `Searcher` component, you can specify"
" the type hint as follows:"
msgstr "注册器是一个泛型类，因此您可以通过类型实例化来优化类型提示。"
"比如，您在定义 Searcher 这一类组件时，可以使用如下方式来创建注册器："

